name: "Terraform"

on:
  pull_request:
    branches:
      - main
    types:
      - "closed"

jobs:
  rules_deploy:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      WORKSPACE: ${{ secrets.WORKSPACE }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Git config
        run: |
          git config --global user.email "terence.wallace@gmail.com"
          git config --global user.name "Github Test"
      - run: |
          echo "Job started"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          # terraform_version: 0.13.0:
          cli_config_credentials_token: ${{ secrets.TFC_API_TOKEN }}

      - name: Terraform Set workspace
        id: workspace
        run: |
          terraform workspace list
          echo -e "terraform {\n  cloud {\n    organization = \"bgp-summary-test\"\n\n    workspaces {\n      name = \"${WORKSPACE}_test\"\n    }\n  }\n}\n" > workspace.tf
          cat workspace.tf

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      # - name: Terraform Plan
      #   id: plan
      #   if: github.event_name == 'pull_request'
      #   run: terraform plan -no-color
      #   continue-on-error: true

      # - uses: actions/github-script@0.9.0
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
      #       #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
      #       #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>
      #       \`\`\`\n
      #       ${process.env.PLAN}
      #       \`\`\`
      #       </details>
      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })
      # - name: Terraform Plan Status
      #   if: steps.plan.outcome == 'failure'
      #   run: exit 1

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve
        continue-on-error: true

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'pull_request'
      #   run: terraform apply -auto-approve

      - name: Terraform Apply Status
        if: steps.apply.outcome == 'failure'
        run: |
          echo "Terraform apply failed - see 'apply' step above for more details"
